import java.awt.Color;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import org.apache.sanselan.ImageReadException;
import org.apache.sanselan.Sanselan;
import org.apache.sanselan.common.IImageMetadata;
import org.apache.sanselan.formats.jpeg.JpegImageMetadata;
import org.apache.sanselan.formats.tiff.TiffField;
import org.apache.sanselan.formats.tiff.TiffImageMetadata;
import org.apache.sanselan.formats.tiff.constants.TiffConstants;

import sun.rmi.runtime.Log;

/**
 * 
 * @author adnan
 */
public class ApplicationFrame extends javax.swing.JFrame {
	File mDir;
	File[] mImageFiles;
	String strImageFilePath;
	MouseAdapter mMouseAdapter;

	// ArrayList<String> imageList;

	/** Creates new form ApplicationFrame */
	public ApplicationFrame() {
		mMouseAdapter = new MyMouseAdapter();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {

		jToolBar1 = new javax.swing.JToolBar();
		btnOpen = new javax.swing.JButton();
		jSeparator1 = new javax.swing.JToolBar.Separator();
		txtSearch = new javax.swing.JTextField();
		btnSearch = new javax.swing.JButton();
		jSplitPane1 = new javax.swing.JSplitPane();
		jScrollPane1 = new javax.swing.JScrollPane();
		pnlImagesList = new javax.swing.JPanel();
		lblImage = new javax.swing.JLabel();
		lblImage.addMouseListener(mMouseAdapter);
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jToolBar1.setFloatable(false);

		btnOpen.setText("Open");
		btnOpen.setFocusable(false);
		btnOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		btnOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		btnOpen.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnOpenActionPerformed(evt);
			}
		});
		jToolBar1.add(btnOpen);
		jToolBar1.add(jSeparator1);

		txtSearch.setColumns(15);
		txtSearch
				.setToolTipText("Enter your search criteria and the press Search");
		jToolBar1.add(txtSearch);

		btnSearch.setText("Search");
		btnSearch.setFocusable(false);
		btnSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		btnSearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		btnSearch.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnSearchActionPerformed(evt);
			}
		});
		jToolBar1.add(btnSearch);

		jSplitPane1.setDividerLocation(120);

		pnlImagesList.setLayout(new java.awt.GridLayout(0, 1, 0, 2));
		jScrollPane1.setViewportView(pnlImagesList);

		jSplitPane1.setLeftComponent(jScrollPane1);

		lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jSplitPane1.setRightComponent(lblImage);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400,
				Short.MAX_VALUE).addComponent(jSplitPane1,
				javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addComponent(
												jToolBar1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												25,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jSplitPane1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												269, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>

	private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {
		final JFileChooser fc = new JFileChooser();
		// make sure user only selects directories and not files
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		// if user didnt cancel then get the directory he selected and load
		// images from it
		if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			mDir = fc.getSelectedFile();
			// we hav the directory, get images and show them in the scroll pane

			// get only image files and ignore the rest
			mImageFiles = mDir.listFiles(new ImageFileFilter());

			// show them in the left pane
			showThumbNails(mImageFiles);

		}
	}

	private void showThumbNails(File[] images) {
		// clear the left pane of all previous thumb nails
		pnlImagesList.removeAll();
		pnlImagesList.setVisible(false);
		for (File image : images) {

			ImageIcon icon = createImageIcon(image.getAbsolutePath(), 100);
			if (icon != null) {
				JLabel lbl = new JLabel(icon);
				lbl.setBorder(BorderFactory.createLineBorder(Color.BLACK));
				// we are using ImageName property to store the file path so
				// we can later use it when
				// displaying bigger image or when we need to get extra info
				// from file
				lbl.setName(image.getAbsolutePath());
				lbl.addMouseListener(mMouseAdapter);
				pnlImagesList.add(lbl);
			} else
				System.err.println("Image Icon null for "
						+ image.getAbsolutePath());
		}
		pnlImagesList.setVisible(true);
		this.repaint();
	}

	private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add image searching code here:
		String strSearch = txtSearch.getText().trim();
		ArrayList<File> imgList = new ArrayList<File>();
		if (strSearch.equals("")) {
			JOptionPane.showMessageDialog(this, "Please enter search criteria");
			return;
		}

		// File dir = new File("/sdcard/DCIM/Camera");

		for (File file : mImageFiles) {
			if (file.isDirectory())
				continue;

			IImageMetadata metadata = null;
			JpegImageMetadata jpegMetadata = null;
			TiffImageMetadata exif = null;

			try {
				metadata = Sanselan.getMetadata(file);
			} catch (ImageReadException ire) {
				System.err.println("ImageReadException file=" + file.getName());
			} catch (IOException ioe) {
				System.err.println("IOException file=" + file.getName());
			}
			// establish jpegMedatadata
			if (metadata != null) {
				jpegMetadata = (JpegImageMetadata) metadata;
			}

			// establish exif
			if (jpegMetadata != null) {
				exif = jpegMetadata.getExif();
			}

			if (exif != null) {
				try {
					TiffField desc = exif
							.findField(TiffConstants.EXIF_TAG_IMAGE_DESCRIPTION);

					if (desc != null
							&& desc.getStringValue().contains(strSearch)) {
						imgList.add(file);
					}

				} catch (ImageReadException e) {
					e.printStackTrace();
				}
			}

		}
		if (imgList.size() == 0) {
			JOptionPane.showMessageDialog(this, "No images with '" + strSearch
					+ "' in extra info can be found.");
			return;
		}

		showThumbNails((File[]) imgList.toArray());
	}

	/** Returns an ImageIcon, or null if the path was invalid. */
	protected static ImageIcon createImageIcon(String path, double scale) {
		ImageIcon i = new ImageIcon(path);
		Image img = i.getImage();
		int width = img.getWidth(null);
		int height = img.getHeight(null);
		int newWidth = (int) ((width > height) ? scale
				: (width * scale / height));
		int newHeight = (int) ((width > height) ? (height * scale / width)
				: scale);
		i.setImage(img.getScaledInstance(newWidth, newHeight,
				Image.SCALE_SMOOTH));
		return i;
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		new ApplicationFrame().setVisible(true);
	}

	// Variables declaration - do not modify
	private javax.swing.JButton btnOpen;
	private javax.swing.JButton btnSearch;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JToolBar.Separator jSeparator1;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JLabel lblImage;
	private javax.swing.JPanel pnlImagesList;
	private javax.swing.JTextField txtSearch;

	// End of variables declaration

	class ImageFileFilter implements FilenameFilter {
		public boolean accept(File dir, String name) {
			String[] extensions = { "jpg", "JPG", "jpeg", "JPEG", "gif", "GIF","png", "PNG" };
			for (String ext : extensions)
				if (name.endsWith(ext))
					return true;
			return false;
		}
	}

	class MyMouseAdapter extends MouseAdapter {
		@Override
		public void mouseClicked(MouseEvent e) {
			super.mouseClicked(e);
			JLabel lbl = (JLabel) e.getSource();
			String info = "No exif meta data in the image";
			if (lbl != lblImage) {
				strImageFilePath = lbl.getName();
				Image img = ((ImageIcon) lbl.getIcon()).getImage();
				double scale = (img.getWidth(null) > img.getHeight(null)) ? lblImage
						.getWidth()
						: lblImage.getHeight();
				lblImage.setIcon(createImageIcon(strImageFilePath, scale));
			} else if (e.getButton() == MouseEvent.BUTTON3) {
				//Display extra info and location info here
				File file = new File(strImageFilePath);

				IImageMetadata metadata = null;
				JpegImageMetadata jpegMetadata = null;
				TiffImageMetadata exif = null;

				try {
					metadata = Sanselan.getMetadata(file);
				} catch (ImageReadException ire) {
					System.err.println("ImageReadException file="
							+ file.getName());
				} catch (IOException ioe) {
					System.err.println("IOException file=" + file.getName());
				}
				// establish jpegMedatadata
				if (metadata != null) {
					jpegMetadata = (JpegImageMetadata) metadata;
				}

				// establish exif
				if (jpegMetadata != null) {
					exif = jpegMetadata.getExif();
				}

				if (exif != null) {
					try {
						TiffImageMetadata.GPSInfo gpsInfo = exif.getGPS();
						TiffField desc = exif
								.findField(TiffConstants.EXIF_TAG_IMAGE_DESCRIPTION);
						info="";
						if (desc != null)
							info += ("Extra Info: " + desc.getStringValue() + "\n");
						else
							info += ("No extra info in the image.\n");

						if (gpsInfo != null) {
							info += ("Longitude: "
									+ gpsInfo.getLongitudeAsDegreesEast() + "\n");
							info += ("Latitude: "
									+ gpsInfo.getLatitudeAsDegreesNorth() + "\n");
						} else
							info += "No location info in file.\n";

					} catch (ImageReadException ire) {
						System.err.println(ire.getMessage());
					}
				}
				JOptionPane.showMessageDialog(ApplicationFrame.this, info);
			}
		}
	}
}
